// This is a custom classloader impl to allow loading classes with
// interdependencies by having findClass retrieve classes as needed from the
// collection of all classes generated by the target script.
package org.mirah;

import java.security.SecureClassLoader;
import java.lang.ClassLoader;
import java.util.Map;
import java.nio.charset.Charset;

public class MirahClassLoader extends SecureClassLoader {
  private Map<String, String> class_map;
  
  public MirahClassLoader(ClassLoader parent, Map<String, String> class_map) {
    super(parent);
    this.class_map = class_map;
  }

  public Class findClass(String name) throws ClassNotFoundException {
    if (class_map.containsKey(name)) {
      try {
        byte[] bytes = class_map.get(name).getBytes("ISO-8859-1");
        return defineClass(name, bytes, 0, bytes.length);
      } catch (java.io.UnsupportedEncodingException ex) {
          throw new ClassNotFoundException(name, ex);
      }
    }
    throw new ClassNotFoundException(name);
  }

  public Class loadClass(String name, boolean resolve) throws ClassNotFoundException {
    Class cls = findLoadedClass(name);
    if (cls == null) {
      if (class_map.containsKey(name)) {
        cls = findClass(name);
      } else {
        cls = super.loadClass(name, false);
      }
    }
    if (resolve) {
      resolveClass(cls);
    }
    return cls;
  }
}